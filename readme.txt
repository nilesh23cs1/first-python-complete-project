install python  // add it to path variable during intallination  using software 
pip install virtualenv    >> install virtual environment 
python -m venv env        >> create virtual environment named env
env\Scripts\activate     >>acivate virtual environment
deactivate               >>deacivate virtual environment

pip freeze              >> tells packages installed in global environment
env\Scripts\activate
install python specific version  and  django specific version in virtual environment using command>>  pip install Django==3.0.7
python --version          >>check python version
django-admin --version    >>check django version
pip freeze                >>tells us python & django version and packages  installed in virtal environment 


django-admin startproject tester    >>create project tester
cd tester
python manage.py runserver
python manage.py startapp mido 
after that add mido in installed apps of settings file of tester folder INSTALLED_APPS = ['mido','django.contrib.admin',]
and create urls.py in mido folder

In tester.urls
add include >>>        from django.urls import path,include
add         >>>        path('mido/', include('mido.urls'))

In mido ->urls.py
from . import views
path('', views.didi, name='n1'),
path('contactus', views.contact, name='c1'),
path('aboutus', views.about, name='a1'),

In mido ->views.py
from django.shortcuts import render

def didi(request):
    content = {'fruit': 'honey'  }
    return render(request,'hi.html', content)

def about(request):
    content = { 'fruit': 'apple'}
    return render(request,'about.html', content)

def contact(request):
    content = {'fruit': 'carrot' }
    return render(request,'contact.html', content)




create templates directory in mido directory and add hi.html , about.html , contact.html
whole hi.html file content
{% extends 'base.html' %}

{% block title %}
<h1>Home Page</h1>
{% endblock title %}

{% block ginga %}
<h1>{{fruit}} </h1>
{% endblock ginga %}




-------------------------------------
whole about.html file content
{% extends 'base.html' %}

{% block title %}
<h1>About Us page </h1>
{% endblock title %}

{% block ginga %}
<h1>{{fruit}} </h1>
{% endblock ginga %}



-----------------------------------
whole contact.html fille content
{% extends 'base.html' %}

{% block title %}
<h1>Contact Us page</h1>
{% endblock title %}

{% block ginga %}
<h1>{{fruit}} </h1>
{% endblock ginga %}







Create templates folder in tester directory  and add base.html
in settings.py of tester add  'DIRS': ['templates',],
like TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates',],
        'APP_DIRS': True,
}
]







create static folder in tester directory and add css,js,image director. add logo.png in image directory.
add in setting file of tester directory          STATICFILES_DIRS = ["static"]
like 
STATIC_URL = 'static/'
STATICFILES_DIRS = ["static"]

add in base.html file ,following lines:
{% load static %}
<img src="{% static "image/logo.png" %}">








whole base.html file content
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<img src="{% static "image/logo.png" %}">
<nav style="display: flex; justify-content:space-evenly;">
    <a href="{% url 'n1' %}">Home</a>
    <a href="{% url 'a1' %}">About Us</a>
    <a href="{% url 'c1' %}">Contact</a>
</nav>

{% block title %}
{% endblock title %}

{% block ginga %}
{% endblock ginga %}

</body>
</html>









-----------------------------------------

in models.py of mido directory add following lines:
class midomodel(models.Model):
    task=models.CharField(max_length=300)
    done=models.BooleanField(default=False)

    def __str__(self):
        return self.task+"-"+str(self.done)       #This method returns the string representation of the object
                                                  #i.e. convert object to string




---------------------------------------
python manage.py makemigrations            #this commands add models in database and create file in 
                                            migration directory of mido directory.
                                            It create id field which is autoincrement,unique,autogenerated


python manage.py migrate                     #this command will migrate changes.




---------------------------------------------------
add in admin.py of mido directory:
from mido.models import midomodel
admin.site.register(midomodel)                    #this command stores midomodel in admin dashbored
----------------------------------------------------------


python manage.py createsuperuser              #create superuser (email optional.) Must provide in real project.
python manage.py runserver                   #check http://127.0.0.1:8000/admin/ section for model we create 




Django data models for email and password too:
https://www.webforefront.com/django/modeldatatypesandvalidation.html



-------------------------------------------------------------------



add in urls.py of mido directory
path('services', views.services, name='s1'),



add services.html in templates directory of mido directory
<body>
{{alltask}}

<br><br><br>

{% for obj in alltask %}
{{obj.task}}  ||||||||||||| {{obj.done}}
<br>
{% endfor %}


<br><br><br>

{% for obj in alltask %}

{% if obj.done %}
{{obj.task}}  ||||||||||||| Completed <br>
{% else %}
{{obj.task}}  ||||||||||||| Not Completed <br>

{% endif %}
{% endfor %}




</body>




add in views.py of mido directory

def services(request):
	alltask=midomodel.objects.all
	return render(request,'services.html',{'alltask':alltask})




run command python manage.py runserver
http://127.0.0.1:8000/mido/services

---------------------------------------------------------------------------



add forms.py in mido directory
forms.py file contents:


from django import forms
from .models import midomodel

class midoform(forms.ModelForm):
	class Meta:
		model = midomodel                 #defines the model on which i am going to edit
		fields = '__all__'                # and the field i am going to edit





add in views.py of mido directory:
from django.shortcuts import render, redirect  # import redirect here
from mido.models import midomodel
from mido.forms import midoform
from django.contrib import messages


change services in views.py of mido directory as:

def services(request):
    if request.method == 'POST':                        #check if request is POST
        form=midoform(request.POST or None)
        if form.is_valid():                             #if form data is valid
            form.save()                                 #then save the form.also save data in model
	messages.success(request,('New Task Added'))    #message 'New Task Added') is displayed
                                                        # after adding task into database
        return(redirect('servin'))                      #servin must match to the name while defining
                                                        #path of services in url.py
                                                        #for ex.     path('services', views.services, name='servin'),
                                                        #i.e. must matches to the views name
    else:
    	alltask=midomodel.objects.all                 #otherwise we will print all our task.
   	return render(request,'services.html',{'alltask': alltask})




Add in services.html in first line of body tag

{% if messages %}      <!-- Just add on more validation i.e. if message is available then loop
                            work and message displayed otherwise loop not work. -->
{% for message in messages %}
<h1 style="color: red;"> {{message}}  </h1>
{% endfor %}
{% endif %}

<form method="POST">
    {% csrf_token %}   <!--POST method is used to send data on server & csrf_token used for security-->
    <input type="text" name="task" required placeholder="Enter task"> <!--name must match with form fields -->
    <button type="submit">Submit</button>
</form>




------------------------------------------------------------------------------


------------------------------------------------------------------------------

------------------------------------------------------------------------------

Add in services.html following lines:
<br><br><h1>Delete item</h1>               <!-- Every Object has id. We can obtain by using obj.id -->
{% if alltask %}
{% for obj in alltask %}
{{obj.id}}||{{obj.task}}||{{obj.done}}||||||<a href="{% url 'deletetask' obj.id %}"> <button>Delete</button> </a><br>
{% endfor %}
{% endif %}





add in url.py of mido directory:
path('delete/<taskid>', views.deletetask, name='deletetask'),




add folowing lines in views.py of mido directory:
def deletetask(request, taskid):
    task = midomodel.objects.get(pk=taskid)
    task.delete()
    return redirect('servin')





------------------------------------------------------------------------------------
add in url.py of mido directory:
path('edit/<taskid>', views.edittask, name='edittask'),



Add following lines in views.py of mido directory: 
def edittask(request, taskid):
    if request.method == 'POST':
        task = midomodel.objects.get(pk=taskid)
        form=midoform(request.POST or None , instance=task ) #since we did not create new form
        if form.is_valid():  #we are updating old object .thus instance is used
            form.save()

        messages.success(request, ('Task Edited'))
        return redirect('servin')
    else:
        taskobj = midomodel.objects.get(pk=taskid)
        return render(request, 'edit.html', {'taskobj': taskobj})





create edit.html in templates of mido directory and add following lines:

<form method="POST">
    {% csrf_token %}   
    <input type="text" name="task" required placeholder="{{ taskobj.task }}" value="{{ taskobj.task }}">
    <input type="hidden" name="done" value= " {{taskobj.done}} " >
    <!-- Since we dont want to change our done value . Thus we include this field -->
    <!-- Otherwise our form will make the done value to false because it is false by default.-->
    <!-- Thus we take the value of done stored in database and pass this value to form -->
    <!-- in order to save it in database. Thus we are not changing our done value.-->
    <!-- Otherwise by removing this line it will make done value false everytime-->
    <!-- because done is false by default in our model -->
    <button type="submit">Update Task</button>
</form>




Add following lines in services.html
<br><br><h1>Edit item</h1>
{% if alltask %}
{% for obj in alltask %}
{{obj.id}}||{{obj.task}}||{{obj.done}}||||||<a href="{% url 'edittask' obj.id %}"> <button>Edit</button> </a><br>
{% endfor %}
{% endif %}


-----------------------------------------------------------------------
Add following lines in urls.py of mido directory

    path('complete/<taskid>', views.completetask, name='completetask'),
    path('pending/<taskid>', views.pendingtask, name='pendingtask'),




add following lines in views.py of mido directory:

def completetask(request, taskid):
    task = midomodel.objects.get(pk=taskid)
    task.done = True
    task.save()
    return redirect('servin')


def pendingtask(request, taskid):
    task = midomodel.objects.get(pk=taskid)
    task.done = False
    task.save()
    return redirect('servin')







Add following lines in services.html:

<br><br><h1>Mark Completed or pending</h1>
{% if alltask %}
{% for obj in alltask %}
{% if obj.done %}
{{obj.id}}||{{obj.task}}||{{obj.done}}||<a href="{% url 'pendingtask' obj.id %}"> <button>Mark it pending</button> </a><br>
{% else %}
{{obj.id}}||{{obj.task}}||{{obj.done}}||<a href="{% url 'completetask' obj.id %}"> <button>Mark it completed</button> </a><br>
{% endif %}
{% endfor %}
{% endif %}



------------------------------------------------------------------------------
Fixing url names


remove the path from urls.py of mido directory
and add in urls.py of tester directory


from mido import views as views_as
    path('contactus', views_as.contact, name='c1'),  #writing here views_as.contact instead of views.contact
    path('aboutus', views_as.about, name='a1'),      # because we write   from mido import views as views_as
                                                     #instead of          from mido import views





Creating homepage

add in urls.py of tester directory
    path('', views_as.index, name='index'),


add in views.py of mido directory following lines:
def index(request):
    content = {'fruit': 'Homepage Content'}
    return render(request, 'index.html', content)




create index.html in templates of mido directory and add following contents:
{% extends 'base.html' %}

{% block title %}
<h1>Homepage Title(Index Page) </h1>
{% endblock title %}

{% block ginga %}
<h1>{{fruit}} </h1>
{% endblock ginga %}




add followig lines in base.html in global templates  directory:
 <a href="{% url 'index' %}">Index</a>





-------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
python manage.py startapp userapp

put in installed app of settings.py of tester directory 'userapp'
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mido',
    'userapp'
]

add urls.py in userapp directory
from . import views
from django.urls import path

urlpatterns=[
path('register', views.register, name='registername'),
]


add in urls.py of tester directory
path('account/',include('userapp.urls')),


add in views.py of userapp diretory following lines:
from django.shortcuts import render,redirect             #import redirect here
from .forms import CustomRegistrationform
from django.contrib import messages

# Create your views here.
def register(request):
    if request.method=='POST':
        registerform=CustomRegistrationform(request.POST)
        if registerform.is_valid():
            registerform.save()
            messages.success(request, ("New User Account Created,Login to get started"))

        return redirect('registername')


    else:
        registerform=CustomRegistrationform()
        return render(request,'register.html',{'registerform':registerform})





create templates directory and add register.html in templates of userapp directory

{% extends 'base.html' %}

{% block title %}
<h1>Register page </h1>
{% endblock title %}


{% block ginga %}

{% if messages %}
{% for message in messages %}
<h1 style="color: red;"> {{message}}  </h1>
{% endfor %}
{% endif %}

<form method="POST">
    {% csrf_token %}
    {{ registerform }}

    <button type="submit">Register</button>
</form>

{% endblock ginga %}





create forms.py in userapp directory
from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User

class CustomRegistrationform(UserCreationForm): #inheriting Usercreation form and add one extra
                                                 #email field
    email=forms.EmailField()

    class Meta:
        model=User
        fields=['username','email','password1','password2']  #order of fields important here





-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
add following lines in urls.py of userapp directory

from django.contrib.auth import views as authviews       (here adding login and logout functionality)
    path('login',authviews.LoginView.as_view(template_name='login.html'),name='login'),   
    path('logout',authviews.LogoutView.as_view(template_name='logout.html'),name='logout'),




create login.html in templates of userapp directory and add following lines in body tag
<!-- Everything remains same from register.html but one line changes   {{ form }}
 instead of {{registerform}}-->
<body>
{% if messages %}
{% for message in messages %}
<h1 style="color: red;"> {{message}}  </h1>
{% endfor %}
{% endif %}

<form method="POST">
    {% csrf_token %}
    {{ form }}
    <button type="submit">Login</button>
</form>
</body>




create logout.html in templates of userapp directory and add following lines in body tag
<body>
<h1>You have been successfully Logout </h1>
</body>


add in settings.py of tester directory (It means after login the user must go to service.html page)          
LOGIN_REDIRECT_URL = "servin"

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

add in base.html in <nav> section
<a href="{% url 'servin' %}">Services</a>
{% if user.is_authenticated %}       <!-- if user is logged in then display its username and email id and logout button else show login and register button -->
<span> Logged In as {{ user.username }} .Your email id {{ user.email }} </span>
<a href="{% url 'logout' %}"><button> Logout </button></a>
{% else %}
<a href="{% url 'login' %}"><button> Login </button></a>
<a href="{% url 'register' %}"><button> Register </button></a>
{% endif %}





add following lines in views.py of mido directory:
from django.contrib.auth.decorators import login_required
@login_required         #put this function in front of view function like service that can only be accessed by login user.

like 
@login_required
def services(request):


@login_required
def deletetask(request, taskid):

@login_required
def edittask(request, taskid):


@login_required
def completetask(request, taskid):

@login_required
def pendingtask(request, taskid):





Add in bootom line of settings.py of tester directory following lines:
LOGIN_URL='login'        # If the user is not logged in it cant access to service page. Thus we can move this user to only login page.


-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
We need to show which task is added by which user.
So we need foreign key in order to establish relationship between user and task
And we had to delete all current items.


Add in views.py of mido directory following lines (Here we create foreign key and on delete cascade is used when user is deleted all its user data gets deleted.)
from django.contrib.auth.models import User
manage=models.ForeignKey(User,on_delete=models.CASCADE,default=None)      # Here defining foreign key that which task is added by which user.


delete all task from midomodel using admin panel
run these commands: python manage.py makemigrations , python manage.py migrate
add one task in midomodel through admin panel. 

add in views.py of mido directory add one line given below:
form.save(commit=False).manage=request.user #delaying form.save and
                                   # change manage field of database and requesting username

Full code here:
@login_required
def services(request):
    if request.method == 'POST':  # check if request is POST
        form = midoform(request.POST or None)
        if form.is_valid():  # if form data is valid
            form.save(commit=False).manage=request.user #delaying form.save and
                                   # change manage field of database and requesting username
            form.save()  # then save the form.also save data in model
        messages.success(request, (
                'New Task Added'))  # message 'New Task Added') is displayed after adding task into database
        return (redirect('servin'))

    else:
        alltask = midomodel.objects.all  # otherwise we will print all our task.
        return render(request, 'services.html', {'alltask': alltask})


-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
Sign up heroku
install heroku CLI . Verify installing heroku by type command in cmd: heroku
then type command for login: heroku login


watch video for git.ignore file 21->3rd lecture named "3. Working with requirements.txt and .gitignore"

in 22->Watch all 4 lecture for security


type below 3 command:
pip install django-heroku
heroku create tmprot                                >> name of tmprot is unique because project is accessed via tmprot.heroku.com
pip install gunicorn


in first line of settings.py of tester directory add:
import os
import django_heroku
at bottom of settings.py of tester directory add:
django_heroku.settings(locals())
STATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')


create Procfile without extension in base directory which contains manage.py and add following lines:
web: gunicorn tester.wsgi

create empty directory staticfiles and create empty file inside it named .keep without extension in base directory


type command in cmd
cd desktop\turro\tester                             >> tester path contains manage.py file. It is base directory
pip freeze > requirements.txt



commit project in github using command:
git init
git status
git add .
git commit -m "Final Commit"
git status
git remote add origin "https://github.com/nilesh23cs1/first-python-complete-project"
git branch -M main
git push -u origin main


heroku git:remote -a tmprot
git push heroku main








